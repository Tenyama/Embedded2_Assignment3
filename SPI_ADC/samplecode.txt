#include <stdio.h>
#include "NUC100Series.h"

void System_Config(void);
void ADC7_Config(void);
void SPI2_Config(void);
void SPI2_Send(unsigned char temp);

void System_Config(void){
	
	SYS_UnlockReg(); // Unlock protected registers

	//Enable clock sources
	CLK->PWRCON |= (1 << 0);
	while(!(CLK->CLKSTATUS & (1 << 0)));
	CLK->PWRCON |= (1 << 1);
	while(!(CLK->CLKSTATUS & (1 << 1)));
	CLK->PWRCON |= (1 << 3);
	while(!(CLK->CLKSTATUS & (1 << 3)));

	//PLL configuration starts
	CLK->PLLCON &= ~(1<<19); //PLL input is 12MHz
	CLK->PLLCON &= ~(1<<16); // PLL in normal mode
	CLK->PLLCON &= (~(0x01FF << 0)); // PLL in power-down mode
	CLK->PLLCON |= 48; //frequency 50MHz
	CLK->PLLCON &= ~(1<<18); //enable PLL out
	while(!(CLK->CLKSTATUS & (1 << 2)));
	//PLL configuration ends

	//clock source selection
	CLK->CLKSEL0 &= (~(0x07 << 0));
	CLK->CLKSEL0 |= (0x02 << 0);
	//clock frequency division 
	CLK->CLKDIV &= ~0x0F;
	
	//enable clock of SPI2
	CLK->APBCLK |= 1 << 14; 
	
	//ADC Clock selection and configuration
	CLK->CLKSEL1 &= ~(0x03 << 2); // Set 12 MHz as ADC clock source
	CLK->CLKDIV &= ~(0x0FF << 16);
	CLK->CLKDIV |= (0x0B << 16); // ADC clock divider (11+1) => ADC clock is 12/12 = 1 MHz
	CLK->APBCLK |= (0x01 << 28); // enable ADC clock
	
	SYS_LockReg(); // Lock protected registers
}

void ADC7_Config(void) {
		PA->PMD &= ~(0x03 << 14);
		PA->PMD |= (0x00 << 14); // PA.7 is input pin
		PA->OFFD |= (0x01 << 23); // PA.7 digital input path is disabled
		SYS->GPA_MFP |= (0x01 << 7); // GPA_MFP[7] = 1 for ADC7
		SYS->ALT_MFP &= ~(0x01 << 2); //ALT_MFP[2] = 0 for ADC7
		SYS->ALT_MFP &= ~(0x01 << 11); //ALT_MFP[11] = 0 for ADC7
	
		//ADC operation configuration
		ADC->ADCR |= (0x03 << 2); // continuous scan mode
		ADC->ADCR &= ~(0x01 <<1); // ADC interrupt is disabled
		ADC->ADCR |= (0x01 <<0); // ADC is enabled
		ADC->ADCHER &= ~(0x03 << 8); // ADC7 input source is external pin
		ADC->ADCHER |= (0x01 << 7); // ADC channel 7 is enabled.
}

int main(void)
{
	uint32_t adc7_val;
	
	System_Config();
	SPI2_Config();
	ADC7_Config();

	ADC->ADCR |= (0x01 << 11); // start ADC channel 7 conversion
		while(1){
			while(!(ADC->ADSR & (0x01 << 0))); // wait until conversion is completed (ADF=1)
			ADC->ADSR |= (0x01 << 0); // write 1 to clear ADF
			adc7_val = ADC->ADDR[7] & 0x0000FFFF;
			// Vin = 2V, Vref= 3.3V 12bits
			if (adc7_val > 2482){
					SPI2_Send('2');
					SPI2_Send('0');
					SPI2_Send('2');
					SPI2_Send('2');
			}
	}
}

void SPI2_Config(void) {
    SYS -> GPD_MFP |= 1 << 0; //1: SPI2 SS20 function is selected to the pin PD.0
    SYS -> GPD_MFP |= 1 << 1; //1: SPI2 SPICLK function is selected to the pin PD.1
    SYS -> GPD_MFP |= 1 << 3; //1: SPI2 MOSI0 (master output, slave input pin-0) function is selected to the pin PD.3
    SPI2 -> CNTRL &= ~(1 << 23); // disable variable clock frequency
    SPI2 -> CNTRL &= ~(1 << 22); // disable two bits transfer mode
    SPI2 -> CNTRL &= ~(1 << 18); // set Master mode
    SPI2 -> CNTRL &= ~(1 << 17); // disable SPI interrupt
    SPI2 -> CNTRL |= 1 << 11; // SPI clock idle high
    SPI2 -> CNTRL &= ~(1 << 10); //Cleat bit 10
    SPI2 -> CNTRL |= (1 << 10); // LSB is sent first
    SPI2 -> CNTRL &= ~(3 << 8); // one transmit/receive word will be executed in one data transfer
    SPI2 -> CNTRL &= ~(31 << 3); //Transmit/Receive bit length
    SPI2 -> CNTRL |= 8 << 3; // 8 bits transmitted/received per data transfer - 1 byte = 8 bits
    SPI2 -> CNTRL &= ~(1 << 2); //0: Transmit at positive edge of SPI CLK
    SPI2 -> DIVIDER = 24; // SPI clock divider. SPI clock = HCLK / ((DIVIDER+1)*2) = 1 MHz. HCLK = 50MHz
}

void SPI2_Send(unsigned char temp){
		SPI2->SSR |= 1 << 0;
		SPI2->TX[0] = temp;
		SPI2->CNTRL |= 1 << 0;
		while(SPI2->CNTRL & (1 << 0));
		SPI2->SSR &= ~(1 << 0);
}